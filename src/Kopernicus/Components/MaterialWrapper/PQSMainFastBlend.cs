// Material wrapper generated by shader translator tool
using System;
using System.Diagnostics.CodeAnalysis;
using UnityEngine;

namespace Kopernicus.Components.MaterialWrapper
{
    [SuppressMessage("ReSharper", "MemberCanBeProtected.Global")]
    [SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
    [SuppressMessage("ReSharper", "AutoPropertyCanBeMadeGetOnly.Local")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    public class PQSMainFastBlend : Material
    {
        // Internal property ID tracking object
        protected class Properties
        {
            // Return the shader for this wrapper
            private const String SHADER_NAME = "Terrain/PQS/PQS Main Shader - Fast Blend";

            public static Shader Shader
            {
                get { return Shader.Find(SHADER_NAME); }
            }

            // Saturation, default = 1
            public const String SATURATION_KEY = "_saturation";
            public Int32 SaturationId { get; private set; }

            // Contrast, default = 1
            public const String CONTRAST_KEY = "_contrast";
            public Int32 ContrastId { get; private set; }

            // Colour Unsaturation (A = Factor), default = (1,1,1,0)
            public const String TINT_COLOR_KEY = "_tintColor";
            public Int32 TintColorId { get; private set; }

            // Near Blend, default = 0.5
            public const String POWER_NEAR_KEY = "_powerNear";
            public Int32 PowerNearId { get; private set; }

            // Far Blend, default = 0.5
            public const String POWER_FAR_KEY = "_powerFar";
            public Int32 PowerFarId { get; private set; }

            // NearFar Start, default = 2000
            public const String GROUND_TEX_START_KEY = "_groundTexStart";
            public Int32 GroundTexStartId { get; private set; }

            // NearFar End, default = 10000
            public const String GROUND_TEX_END_KEY = "_groundTexEnd";
            public Int32 GroundTexEndId { get; private set; }

            // Steep Blend, default = 1
            public const String STEEP_POWER_KEY = "_steepPower";
            public Int32 SteepPowerId { get; private set; }

            // Steep Fade Start, default = 20000
            public const String STEEP_TEX_START_KEY = "_steepTexStart";
            public Int32 SteepTexStartId { get; private set; }

            // Steep Fade End, default = 30000
            public const String STEEP_TEX_END_KEY = "_steepTexEnd";
            public Int32 SteepTexEndId { get; private set; }

            // Steep Texture, default = "white" { }
            public const String STEEP_TEX_KEY = "_steepTex";
            public Int32 SteepTexId { get; private set; }

            // Steep Bump Map, default = "bump" { }
            public const String STEEP_BUMP_MAP_KEY = "_steepBumpMap";
            public Int32 SteepBumpMapId { get; private set; }

            // Steep Near Tiling, default = 1
            public const String STEEP_NEAR_TILING_KEY = "_steepNearTiling";
            public Int32 SteepNearTilingId { get; private set; }

            // Steep Far Tiling, default = 1
            public const String STEEP_TILING_KEY = "_steepTiling";
            public Int32 SteepTilingId { get; private set; }

            // Low Texture, default = "white" { }
            public const String LOW_TEX_KEY = "_lowTex";
            public Int32 LowTexId { get; private set; }

            // Low Bump Map, default = "bump" { }
            public const String LOW_BUMP_MAP_KEY = "_lowBumpMap";
            public Int32 LowBumpMapId { get; private set; }

            // Low Near Tiling, default = 1000
            public const String LOW_NEAR_TILING_KEY = "_lowNearTiling";
            public Int32 LowNearTilingId { get; private set; }

            // Low Far Tiling, default = 10
            public const String LOW_MULTI_FACTOR_KEY = "_lowMultiFactor";
            public Int32 LowMultiFactorId { get; private set; }

            // Low Bump Near Tiling, default = 1
            public const String LOW_BUMP_NEAR_TILING_KEY = "_lowBumpNearTiling";
            public Int32 LowBumpNearTilingId { get; private set; }

            // Low Bump Far Tiling, default = 1
            public const String LOW_BUMP_MULTI_FACTOR_KEY = "_lowBumpMultiFactor";
            public Int32 LowBumpMultiFactorId { get; private set; }

            // Mid Texture, default = "white" { }
            public const String MID_TEX_KEY = "_midTex";
            public Int32 MidTexId { get; private set; }

            // Mid Bump Map, default = "bump" { }
            public const String MID_BUMP_MAP_KEY = "_midBumpMap";
            public Int32 MidBumpMapId { get; private set; }

            // Mid Near Tiling, default = 1000
            public const String MID_NEAR_TILING_KEY = "_midNearTiling";
            public Int32 MidNearTilingId { get; private set; }

            // Mid Far Tiling, default = 10
            public const String MID_MULTI_FACTOR_KEY = "_midMultiFactor";
            public Int32 MidMultiFactorId { get; private set; }

            // Mid Bump Near Tiling, default = 1
            public const String MID_BUMP_NEAR_TILING_KEY = "_midBumpNearTiling";
            public Int32 MidBumpNearTilingId { get; private set; }

            // High Texture, default = "white" { }
            public const String HIGH_TEX_KEY = "_highTex";
            public Int32 HighTexId { get; private set; }

            // High Bump Map, default = "bump" { }
            public const String HIGH_BUMP_MAP_KEY = "_highBumpMap";
            public Int32 HighBumpMapId { get; private set; }

            // High Near Tiling, default = 1000
            public const String HIGH_NEAR_TILING_KEY = "_highNearTiling";
            public Int32 HighNearTilingId { get; private set; }

            // High Far Tiling, default = 10
            public const String HIGH_MULTI_FACTOR_KEY = "_highMultiFactor";
            public Int32 HighMultiFactorId { get; private set; }

            // High Bump Near Tiling, default = 1
            public const String HIGH_BUMP_NEAR_TILING_KEY = "_highBumpNearTiling";
            public Int32 HighBumpNearTilingId { get; private set; }

            // High Bump Far Tiling, default = 1
            public const String HIGH_BUMP_MULTI_FACTOR_KEY = "_highBumpMultiFactor";
            public Int32 HighBumpMultiFactorId { get; private set; }

            // Low Transition Start, default = 0
            public const String LOW_START_KEY = "_lowStart";
            public Int32 LowStartId { get; private set; }

            // Low Transition End, default = 0.3
            public const String LOW_END_KEY = "_lowEnd";
            public Int32 LowEndId { get; private set; }

            // High Transition Start, default = 0.8
            public const String HIGH_START_KEY = "_highStart";
            public Int32 HighStartId { get; private set; }

            // High Transition End, default = 1
            public const String HIGH_END_KEY = "_highEnd";
            public Int32 HighEndId { get; private set; }

            // AP Global Density, default = 1
            public const String GLOBAL_DENSITY_KEY = "_globalDensity";
            public Int32 GlobalDensityId { get; private set; }

            // FogColorRamp, default = "white" { }
            public const String FOG_COLOR_RAMP_KEY = "_fogColorRamp";
            public Int32 FogColorRampId { get; private set; }

            // PlanetOpacity, default = 1
            public const String PLANET_OPACITY_KEY = "_PlanetOpacity";
            public Int32 PlanetOpacityId { get; private set; }

            // Ocean Fog Dist, default = 1000
            public const String OCEAN_FOG_DISTANCE_KEY = "_oceanFogDistance";
            public Int32 OceanFogDistanceId { get; private set; }

            // Singleton instance
            private static Properties _singleton;

            public static Properties Instance
            {
                get
                {
                    // Construct the singleton if it does not exist
                    return _singleton ?? (_singleton = new Properties());
                }
            }

            private Properties()
            {
                SaturationId = Shader.PropertyToID(SATURATION_KEY);
                ContrastId = Shader.PropertyToID(CONTRAST_KEY);
                TintColorId = Shader.PropertyToID(TINT_COLOR_KEY);
                PowerNearId = Shader.PropertyToID(POWER_NEAR_KEY);
                PowerFarId = Shader.PropertyToID(POWER_FAR_KEY);
                GroundTexStartId = Shader.PropertyToID(GROUND_TEX_START_KEY);
                GroundTexEndId = Shader.PropertyToID(GROUND_TEX_END_KEY);
                SteepPowerId = Shader.PropertyToID(STEEP_POWER_KEY);
                SteepTexStartId = Shader.PropertyToID(STEEP_TEX_START_KEY);
                SteepTexEndId = Shader.PropertyToID(STEEP_TEX_END_KEY);
                SteepTexId = Shader.PropertyToID(STEEP_TEX_KEY);
                SteepBumpMapId = Shader.PropertyToID(STEEP_BUMP_MAP_KEY);
                SteepNearTilingId = Shader.PropertyToID(STEEP_NEAR_TILING_KEY);
                SteepTilingId = Shader.PropertyToID(STEEP_TILING_KEY);
                LowTexId = Shader.PropertyToID(LOW_TEX_KEY);
                LowBumpMapId = Shader.PropertyToID(LOW_BUMP_MAP_KEY);
                LowNearTilingId = Shader.PropertyToID(LOW_NEAR_TILING_KEY);
                LowMultiFactorId = Shader.PropertyToID(LOW_MULTI_FACTOR_KEY);
                LowBumpNearTilingId = Shader.PropertyToID(LOW_BUMP_NEAR_TILING_KEY);
                LowBumpMultiFactorId = Shader.PropertyToID(LOW_BUMP_MULTI_FACTOR_KEY);
                MidTexId = Shader.PropertyToID(MID_TEX_KEY);
                MidBumpMapId = Shader.PropertyToID(MID_BUMP_MAP_KEY);
                MidNearTilingId = Shader.PropertyToID(MID_NEAR_TILING_KEY);
                MidMultiFactorId = Shader.PropertyToID(MID_MULTI_FACTOR_KEY);
                MidBumpNearTilingId = Shader.PropertyToID(MID_BUMP_NEAR_TILING_KEY);
                HighTexId = Shader.PropertyToID(HIGH_TEX_KEY);
                HighBumpMapId = Shader.PropertyToID(HIGH_BUMP_MAP_KEY);
                HighNearTilingId = Shader.PropertyToID(HIGH_NEAR_TILING_KEY);
                HighMultiFactorId = Shader.PropertyToID(HIGH_MULTI_FACTOR_KEY);
                HighBumpNearTilingId = Shader.PropertyToID(HIGH_BUMP_NEAR_TILING_KEY);
                HighBumpMultiFactorId = Shader.PropertyToID(HIGH_BUMP_MULTI_FACTOR_KEY);
                LowStartId = Shader.PropertyToID(LOW_START_KEY);
                LowEndId = Shader.PropertyToID(LOW_END_KEY);
                HighStartId = Shader.PropertyToID(HIGH_START_KEY);
                HighEndId = Shader.PropertyToID(HIGH_END_KEY);
                GlobalDensityId = Shader.PropertyToID(GLOBAL_DENSITY_KEY);
                FogColorRampId = Shader.PropertyToID(FOG_COLOR_RAMP_KEY);
                PlanetOpacityId = Shader.PropertyToID(PLANET_OPACITY_KEY);
                OceanFogDistanceId = Shader.PropertyToID(OCEAN_FOG_DISTANCE_KEY);
            }
        }

        // Is some random material this material
        public static Boolean UsesSameShader(Material m)
        {
            if (m == null)
            {
                return false;
            }

            return m.shader.name == Properties.Shader.name;
        }

        // Saturation, default = 1
        public Single Saturation
        {
            get { return GetFloat(Properties.Instance.SaturationId); }
            set { SetFloat(Properties.Instance.SaturationId, value); }
        }

        // Contrast, default = 1
        public Single Contrast
        {
            get { return GetFloat(Properties.Instance.ContrastId); }
            set { SetFloat(Properties.Instance.ContrastId, value); }
        }

        // Colour Unsaturation (A = Factor), default = (1,1,1,0)
        public Color TintColor
        {
            get { return GetColor(Properties.Instance.TintColorId); }
            set { SetColor(Properties.Instance.TintColorId, value); }
        }

        // Near Blend, default = 0.5
        public Single PowerNear
        {
            get { return GetFloat(Properties.Instance.PowerNearId); }
            set { SetFloat(Properties.Instance.PowerNearId, value); }
        }

        // Far Blend, default = 0.5
        public Single PowerFar
        {
            get { return GetFloat(Properties.Instance.PowerFarId); }
            set { SetFloat(Properties.Instance.PowerFarId, value); }
        }

        // NearFar Start, default = 2000
        public Single GroundTexStart
        {
            get { return GetFloat(Properties.Instance.GroundTexStartId); }
            set { SetFloat(Properties.Instance.GroundTexStartId, value); }
        }

        // NearFar End, default = 10000
        public Single GroundTexEnd
        {
            get { return GetFloat(Properties.Instance.GroundTexEndId); }
            set { SetFloat(Properties.Instance.GroundTexEndId, value); }
        }

        // Steep Blend, default = 1
        public Single SteepPower
        {
            get { return GetFloat(Properties.Instance.SteepPowerId); }
            set { SetFloat(Properties.Instance.SteepPowerId, value); }
        }

        // Steep Fade Start, default = 20000
        public Single SteepTexStart
        {
            get { return GetFloat(Properties.Instance.SteepTexStartId); }
            set { SetFloat(Properties.Instance.SteepTexStartId, value); }
        }

        // Steep Fade End, default = 30000
        public Single SteepTexEnd
        {
            get { return GetFloat(Properties.Instance.SteepTexEndId); }
            set { SetFloat(Properties.Instance.SteepTexEndId, value); }
        }

        // Steep Texture, default = "white" { }
        public Texture2D SteepTex
        {
            get { return GetTexture(Properties.Instance.SteepTexId) as Texture2D; }
            set { SetTexture(Properties.Instance.SteepTexId, value); }
        }

        public Vector2 SteepTexScale
        {
            get { return GetTextureScale(Properties.Instance.SteepTexId); }
            set { SetTextureScale(Properties.Instance.SteepTexId, value); }
        }

        public Vector2 SteepTexOffset
        {
            get { return GetTextureOffset(Properties.Instance.SteepTexId); }
            set { SetTextureOffset(Properties.Instance.SteepTexId, value); }
        }

        // Steep Bump Map, default = "bump" { }
        public Texture2D SteepBumpMap
        {
            get { return GetTexture(Properties.Instance.SteepBumpMapId) as Texture2D; }
            set { SetTexture(Properties.Instance.SteepBumpMapId, value); }
        }

        public Vector2 SteepBumpMapScale
        {
            get { return GetTextureScale(Properties.Instance.SteepBumpMapId); }
            set { SetTextureScale(Properties.Instance.SteepBumpMapId, value); }
        }

        public Vector2 SteepBumpMapOffset
        {
            get { return GetTextureOffset(Properties.Instance.SteepBumpMapId); }
            set { SetTextureOffset(Properties.Instance.SteepBumpMapId, value); }
        }

        // Steep Near Tiling, default = 1
        public Single SteepNearTiling
        {
            get { return GetFloat(Properties.Instance.SteepNearTilingId); }
            set { SetFloat(Properties.Instance.SteepNearTilingId, value); }
        }

        // Steep Far Tiling, default = 1
        public Single SteepTiling
        {
            get { return GetFloat(Properties.Instance.SteepTilingId); }
            set { SetFloat(Properties.Instance.SteepTilingId, value); }
        }

        // Low Texture, default = "white" { }
        public Texture2D LowTex
        {
            get { return GetTexture(Properties.Instance.LowTexId) as Texture2D; }
            set { SetTexture(Properties.Instance.LowTexId, value); }
        }

        public Vector2 LowTexScale
        {
            get { return GetTextureScale(Properties.Instance.LowTexId); }
            set { SetTextureScale(Properties.Instance.LowTexId, value); }
        }

        public Vector2 LowTexOffset
        {
            get { return GetTextureOffset(Properties.Instance.LowTexId); }
            set { SetTextureOffset(Properties.Instance.LowTexId, value); }
        }

        // Low Bump Map, default = "bump" { }
        public Texture2D LowBumpMap
        {
            get { return GetTexture(Properties.Instance.LowBumpMapId) as Texture2D; }
            set { SetTexture(Properties.Instance.LowBumpMapId, value); }
        }

        public Vector2 LowBumpMapScale
        {
            get { return GetTextureScale(Properties.Instance.LowBumpMapId); }
            set { SetTextureScale(Properties.Instance.LowBumpMapId, value); }
        }

        public Vector2 LowBumpMapOffset
        {
            get { return GetTextureOffset(Properties.Instance.LowBumpMapId); }
            set { SetTextureOffset(Properties.Instance.LowBumpMapId, value); }
        }

        // Low Near Tiling, default = 1000
        public Single LowNearTiling
        {
            get { return GetFloat(Properties.Instance.LowNearTilingId); }
            set { SetFloat(Properties.Instance.LowNearTilingId, value); }
        }

        // Low Far Tiling, default = 10
        public Single LowMultiFactor
        {
            get { return GetFloat(Properties.Instance.LowMultiFactorId); }
            set { SetFloat(Properties.Instance.LowMultiFactorId, value); }
        }

        // Low Bump Near Tiling, default = 1
        public Single LowBumpNearTiling
        {
            get { return GetFloat(Properties.Instance.LowBumpNearTilingId); }
            set { SetFloat(Properties.Instance.LowBumpNearTilingId, value); }
        }

        // Low Bump Far Tiling, default = 1
        public Single LowBumpMultiFactor
        {
            get { return GetFloat(Properties.Instance.LowBumpMultiFactorId); }
            set { SetFloat(Properties.Instance.LowBumpMultiFactorId, value); }
        }

        // Mid Texture, default = "white" { }
        public Texture2D MidTex
        {
            get { return GetTexture(Properties.Instance.MidTexId) as Texture2D; }
            set { SetTexture(Properties.Instance.MidTexId, value); }
        }

        public Vector2 MidTexScale
        {
            get { return GetTextureScale(Properties.Instance.MidTexId); }
            set { SetTextureScale(Properties.Instance.MidTexId, value); }
        }

        public Vector2 MidTexOffset
        {
            get { return GetTextureOffset(Properties.Instance.MidTexId); }
            set { SetTextureOffset(Properties.Instance.MidTexId, value); }
        }

        // Mid Bump Map, default = "bump" { }
        public Texture2D MidBumpMap
        {
            get { return GetTexture(Properties.Instance.MidBumpMapId) as Texture2D; }
            set { SetTexture(Properties.Instance.MidBumpMapId, value); }
        }

        public Vector2 MidBumpMapScale
        {
            get { return GetTextureScale(Properties.Instance.HighTexId); }
            set { SetTextureScale(Properties.Instance.HighTexId, value); }
        }

        public Vector2 MidBumpMapOffset
        {
            get { return GetTextureOffset(Properties.Instance.HighTexId); }
            set { SetTextureOffset(Properties.Instance.HighTexId, value); }
        }

        // Mid Near Tiling, default = 1000
        public Single MidNearTiling
        {
            get { return GetFloat(Properties.Instance.MidNearTilingId); }
            set { SetFloat(Properties.Instance.MidNearTilingId, value); }
        }

        // Mid Far Tiling, default = 10
        public Single MidMultiFactor
        {
            get { return GetFloat(Properties.Instance.MidMultiFactorId); }
            set { SetFloat(Properties.Instance.MidMultiFactorId, value); }
        }

        // Mid Bump Near Tiling, default = 1
        public Single MidBumpNearTiling
        {
            get { return GetFloat(Properties.Instance.MidBumpNearTilingId); }
            set { SetFloat(Properties.Instance.MidBumpNearTilingId, value); }
        }

        // High Texture, default = "white" { }
        public Texture2D HighTex
        {
            get { return GetTexture(Properties.Instance.HighTexId) as Texture2D; }
            set { SetTexture(Properties.Instance.HighTexId, value); }
        }

        public Vector2 HighTexScale
        {
            get { return GetTextureScale(Properties.Instance.HighTexId); }
            set { SetTextureScale(Properties.Instance.HighTexId, value); }
        }

        public Vector2 HighTexOffset
        {
            get { return GetTextureOffset(Properties.Instance.HighTexId); }
            set { SetTextureOffset(Properties.Instance.HighTexId, value); }
        }

        // High Bump Map, default = "bump" { }
        public Texture2D HighBumpMap
        {
            get { return GetTexture(Properties.Instance.HighBumpMapId) as Texture2D; }
            set { SetTexture(Properties.Instance.HighBumpMapId, value); }
        }

        public Vector2 HighBumpMapScale
        {
            get { return GetTextureScale(Properties.Instance.HighBumpMapId); }
            set { SetTextureScale(Properties.Instance.HighBumpMapId, value); }
        }

        public Vector2 HighBumpMapOffset
        {
            get { return GetTextureOffset(Properties.Instance.HighBumpMapId); }
            set { SetTextureOffset(Properties.Instance.HighBumpMapId, value); }
        }

        // High Near Tiling, default = 1000
        public Single HighNearTiling
        {
            get { return GetFloat(Properties.Instance.HighNearTilingId); }
            set { SetFloat(Properties.Instance.HighNearTilingId, value); }
        }

        // High Far Tiling, default = 10
        public Single HighMultiFactor
        {
            get { return GetFloat(Properties.Instance.HighMultiFactorId); }
            set { SetFloat(Properties.Instance.HighMultiFactorId, value); }
        }

        // High Bump Near Tiling, default = 1
        public Single HighBumpNearTiling
        {
            get { return GetFloat(Properties.Instance.HighBumpNearTilingId); }
            set { SetFloat(Properties.Instance.HighBumpNearTilingId, value); }
        }

        // High Bump Far Tiling, default = 1
        public Single HighBumpMultiFactor
        {
            get { return GetFloat(Properties.Instance.HighBumpMultiFactorId); }
            set { SetFloat(Properties.Instance.HighBumpMultiFactorId, value); }
        }

        // Low Transition Start, default = 0
        public Single LowStart
        {
            get { return GetFloat(Properties.Instance.LowStartId); }
            set { SetFloat(Properties.Instance.LowStartId, value); }
        }

        // Low Transition End, default = 0.3
        public Single LowEnd
        {
            get { return GetFloat(Properties.Instance.LowEndId); }
            set { SetFloat(Properties.Instance.LowEndId, value); }
        }

        // High Transition Start, default = 0.8
        public Single HighStart
        {
            get { return GetFloat(Properties.Instance.HighStartId); }
            set { SetFloat(Properties.Instance.HighStartId, value); }
        }

        // High Transition End, default = 1
        public Single HighEnd
        {
            get { return GetFloat(Properties.Instance.HighEndId); }
            set { SetFloat(Properties.Instance.HighEndId, value); }
        }

        // AP Global Density, default = 1
        public Single GlobalDensity
        {
            get { return GetFloat(Properties.Instance.GlobalDensityId); }
            set { SetFloat(Properties.Instance.GlobalDensityId, value); }
        }

        // FogColorRamp, default = "white" { }
        public Texture2D FogColorRamp
        {
            get { return GetTexture(Properties.Instance.FogColorRampId) as Texture2D; }
            set
            {
                if (value)
                {
                    value.wrapMode = TextureWrapMode.Clamp;
                    value.mipMapBias = 0.0f;
                }

                SetTexture(Properties.Instance.FogColorRampId, value);
            }
        }

        public Vector2 FogColorRampScale
        {
            get { return GetTextureScale(Properties.Instance.FogColorRampId); }
            set { SetTextureScale(Properties.Instance.FogColorRampId, value); }
        }

        public Vector2 FogColorRampOffset
        {
            get { return GetTextureOffset(Properties.Instance.FogColorRampId); }
            set { SetTextureOffset(Properties.Instance.FogColorRampId, value); }
        }

        // PlanetOpacity, default = 1
        public Single PlanetOpacity
        {
            get { return GetFloat(Properties.Instance.PlanetOpacityId); }
            set { SetFloat(Properties.Instance.PlanetOpacityId, value); }
        }

        // Ocean Fog Dist, default = 1000
        public Single OceanFogDistance
        {
            get { return GetFloat(Properties.Instance.OceanFogDistanceId); }
            set { SetFloat(Properties.Instance.OceanFogDistanceId, value); }
        }

        public PQSMainFastBlend() : base(Properties.Shader)
        {
        }

        [Obsolete("Creating materials from shader source String is no longer supported. Use Shader assets instead.")]
        public PQSMainFastBlend(String contents) : base(contents)
        {
            shader = Properties.Shader;
        }

        public PQSMainFastBlend(Material material) : base(material)
        {
            // Throw exception if this material was not the proper material
            if (material.shader.name != Properties.Shader.name)
            {
                throw new InvalidOperationException(
                    "Type Mismatch: Terrain/PQS/PQS Main - Optimised With Fast Blend shader required");
            }
        }

    }
}
